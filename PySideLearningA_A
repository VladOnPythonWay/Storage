import maya.cmds as cmds
from PySide2 import QtCore
from PySide2 import QtGui
from PySide2 import QtWidgets
import maya.OpenMayaUI as omui

try:
    from shiboken import wrapInstance
except:
    from shiboken2 import wrapInstance


def getMayaWindow():
    pointer = omui.MQtUtil.mainWindow()
    if pointer is not None:
        return wrapInstance(long(pointer), QtWidgets.QWidget)


def constraintMaster_UI():
    objectName = 'PyConstraintMasterWin'
    # check if ui already exists or not
    if cmds.window('PyConstraintMasterWin', exists=1):
        cmds.deleteUI('PyConstraintMasterWin', wnd=1)

    # create window
    parent = getMayaWindow()
    window = QtWidgets.QMainWindow(parent)
    window.setObjectName(objectName)
    window.setWindowTitle('Riga Orient Master')

    # create main widget
    mainWidget = QtWidgets.QWidget()
    window.setCentralWidget(mainWidget)
    QtWidgets.QStyleFactory.create('Windows')
    # Create our main vertical layout
    verticalLayout = QtWidgets.QVBoxLayout(mainWidget)
    # create operate option radio button
    operateLayout = QtWidgets.QHBoxLayout()
    verticalLayout.addLayout(operateLayout)
    # create operate option label
    operateLabel = QtWidgets.QLabel('Operate on joints:')
    operateLayout.addWidget(operateLabel)
    # create operate radio buttons
    operateSelectionButton = QtWidgets.QRadioButton('Selection')
    operateLayout.addWidget(operateSelectionButton)

    operateHierarchyButton = QtWidgets.QRadioButton('Hierarchy')
    operateLayout.addWidget(operateHierarchyButton)
    # create the aim vector layout
    aimGroupBox = QtWidgets.QGroupBox('Aim Vector:')
    aimLayout = QtWidgets.QHBoxLayout()
    verticalLayout.addWidget(aimGroupBox)
    aimGroupBox.setLayout(aimLayout)
    # create aim vector buttons
    axCheckBotton = QtWidgets.QPushButton('X')
    axCheckBotton.isCheckable()
    axCheckBotton.setCheckable(True)
    axCheckBotton.setAutoExclusive(True)
    aimLayout.addWidget(axCheckBotton)
        
    ayCheckBotton = QtWidgets.QPushButton('Y')
    ayCheckBotton.isCheckable()
    ayCheckBotton.setCheckable(True)
    ayCheckBotton.setAutoExclusive(True)
    aimLayout.addWidget(ayCheckBotton)

    azCheckBotton = QtWidgets.QPushButton('Z')
    azCheckBotton.setCheckable(True)
    azCheckBotton.isCheckable()
    azCheckBotton.setAutoExclusive(True)
    aimLayout.addWidget(azCheckBotton)
    # create the up vector layout
    upGroupBox = QtWidgets.QGroupBox('Up Vector:')
    verticalLayout.addWidget(upGroupBox)
    upLayout = QtWidgets.QHBoxLayout()
    upGroupBox.setLayout(upLayout)

    # create up vector buttons
    uxCheckBotton = QtWidgets.QPushButton('X')
    uxCheckBotton.setAutoExclusive(True)
    uxCheckBotton.isCheckable()
    uxCheckBotton.setCheckable(True)
    upLayout.addWidget(uxCheckBotton)

    uyCheckBotton = QtWidgets.QPushButton('Y')
    uyCheckBotton.setAutoExclusive(True)
    uyCheckBotton.setCheckable(True)
    upLayout.addWidget(uyCheckBotton)

    uzCheckBotton = QtWidgets.QPushButton('Z')
    uzCheckBotton.setCheckable(True)
    uzCheckBotton.setAutoExclusive(True)
    upLayout.addWidget(uzCheckBotton)

    # create button
    button = QtWidgets.QPushButton('Orient Joints')
    verticalLayout.addWidget(button)
    button.isChecked()
    button.setStyleSheet('background-color: rgb(120, 120, 100); color:rgb(1, 255, 255);border: none')
    def buttonReleased():
        button.setStyleSheet('background-color: rgb(120, 120, 100); color:rgb(1, 255, 255);border: none')
    def buttonPushed():
        button.setStyleSheet('background-color: rgb(200, 120, 100); color:rgb(1, 255, 255);border: none')
    button.pressed.connect(buttonPushed)
    button.released.connect(buttonReleased)
    # show the window
    window.show()


constraintMaster_UI()
